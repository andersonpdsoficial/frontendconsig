import { useEffect, useState } from "react";
import {
  Typography, Card, CardContent, Stack, Button, IconButton, Table, TableBody, TableCell, TableHead, TableRow, TablePagination
} from "@mui/material";
import { Print as PrintIcon, PictureAsPdf as PdfIcon, FileDownload as FileDownloadIcon } from '@mui/icons-material';
import { api } from "@/lib/api";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import * as XLSX from 'xlsx';

export default function PerguntasFrequentes() {
  const [data, setData] = useState([]);
  const [page, setPage] = useState(0);
  const [totalItems, setTotalItems] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);

  useEffect(() => {
    fetchData();
  }, [page, rowsPerPage]);

  const fetchData = async () => {
    try {
      const response = await api.get(
        `/v1/perguntas_respostas?limit=${rowsPerPage}&offset=${page * rowsPerPage}`
      );

      setData(response.data.results);
      setTotalItems(response.data.count);
    } catch (error) {
      console.log("Ocorreu um erro ao buscar dados", error);
    }
  };

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  // Função para imprimir a página
  const handlePrint = () => {
    window.print();
  };

  // Função para gerar PDF
  const handleDownloadPDF = () => {
    const doc = new jsPDF();
    autoTable(doc, { 
      head: [['Pergunta', 'Resposta']],
      body: data.map((row) => [row.pergunta, row.resposta]),
    });
    doc.save("perguntas_respostas.pdf");
  };

  // Função para baixar em XLSX
  const handleDownloadXLSX = () => {
    const worksheet = XLSX.utils.json_to_sheet(data);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "PerguntasRespostas");
    XLSX.writeFile(workbook, "perguntas_respostas.xlsx");
  };

  // Função para baixar em CSV
  const handleDownloadCSV = () => {
    const worksheet = XLSX.utils.json_to_sheet(data);
    const csv = XLSX.utils.sheet_to_csv(worksheet);
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.setAttribute("href", url);
    link.setAttribute("download", "perguntas_respostas.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <Card>
      <CardContent>
        <Typography variant="h5">Perguntas Frequentes (SIC)</Typography>
        <Typography>Atualizado em: {new Date().toLocaleDateString()} - Fonte: Portal Transparência {" "} </Typography>
        
        <Stack spacing={2} mt={2}>
          <Button variant="contained" color="success" startIcon={<PrintIcon />} onClick={handlePrint}>
            Imprimir
          </Button>
          <Button variant="contained" color="success" startIcon={<PdfIcon />} onClick={handleDownloadPDF}>
            Baixar PDF
          </Button>
          <Button variant="contained" color="success" startIcon={<FileDownloadIcon />} onClick={handleDownloadXLSX}>
            Baixar XLSX
          </Button>
          <Button variant="contained" color="success" startIcon={<FileDownloadIcon />} onClick={handleDownloadCSV}>
            Baixar CSV
          </Button>
        </Stack>

        <Table>
          <TableHead>
            <TableRow>
              <TableCell style={{ fontWeight: "bold", textAlign: "center" }}>Pergunta</TableCell>
              <TableCell style={{ fontWeight: "bold", textAlign: "center" }}>Resposta</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {data.map((row, index) => (
              <TableRow key={index}>
                <TableCell style={{ textAlign: "justify" }}>{row.pergunta}</TableCell>
                <TableCell style={{ textAlign: "justify" }}>{row.resposta}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>

        <TablePagination
          labelRowsPerPage="Linhas por página:"
          rowsPerPageOptions={[10, 25, 50]}
          component="div"
          count={totalItems}
          rowsPerPage={rowsPerPage}
          page={page}
          onPageChange={handleChangePage}
          onRowsPerPageChange={handleChangeRowsPerPage}
        />
      </CardContent>
    </Card>
  );
}
